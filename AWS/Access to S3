package aws

import com.amazonaws._
import com.amazonaws.auth._
import com.amazonaws.services.s3._
import com.amazonaws.services.s3.model._
import java.io._


object accessaws {


  def main(args :Array[String]) {

    println("Hello World")


    uploadToS3("../files/Current Authentication.png","Current Authentication.png")
    val uppath = s"$urlPrefix/$bucketName/Test"
    downloadFromS3("Json.zip","../down/Json.zip")
  }

  val accessKey = ""
  val secretKey = ""
  val bucketName = ""
  val urlPrefix = "https://s3-us-east-2.amazonaws.com"
  val filename = "Current Authentication.png"

  val credentials = new BasicAWSCredentials(accessKey, secretKey)
  val client = new AmazonS3Client(credentials)

  def uploadToS3(fileName: String, uploadPath: String): String = {
    client.putObject(bucketName, uploadPath, new File(fileName))

    val acl = client.getObjectAcl(bucketName, uploadPath)
    acl.grantPermission(GroupGrantee.AllUsers, Permission.Read)
    client.setObjectAcl(bucketName, uploadPath, acl)

    s"$urlPrefix/$bucketName/$uploadPath"
  }

  def fileIsUploadedToS3(uploadPath: String): Boolean = {
    try {
      client.getObjectMetadata(bucketName, uploadPath)
      true
    } catch {
      case e: AmazonServiceException if e.getStatusCode == 404 =>
        false
    }
  }

  def downloadFromS3(uploadPath: String, downloadPath: String) {
    if(!fileIsUploadedToS3(uploadPath)) {
      throw new RuntimeException(s"File $uploadPath is not uploaded to S3")
    }
    client.getObject(new GetObjectRequest(bucketName, uploadPath), new File(downloadPath))
  }


}
